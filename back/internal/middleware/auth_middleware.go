package middleware

import (
	"log"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/lamoda-seller-app/internal/auth"
)

const (
	UserIDKey = "user_id"
)

func JWTAuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		log.Printf("üîê JWT Auth middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è %s %s", c.Request.Method, c.Request.URL.Path)

		authHeader := c.GetHeader("Authorization")
		if authHeader == "" {
			log.Printf("‚ùå JWT Auth: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Authorization header")
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Authorization header is required"})
			c.Abort()
			return
		}

		log.Printf("üîç JWT Auth: –ø–æ–ª—É—á–µ–Ω Authorization header: %s", authHeader[:min(len(authHeader), 20)]+"...")

		parts := strings.Split(authHeader, " ")
		if len(parts) != 2 || parts[0] != "Bearer" {
			log.Printf("‚ùå JWT Auth: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Authorization header")
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Authorization header format must be Bearer {token}"})
			c.Abort()
			return
		}

		tokenStr := parts[1]
		log.Printf("üé´ JWT Auth: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª–∏–Ω–∞: %d)", len(tokenStr))

		claims, err := auth.ValidateToken(tokenStr)
		if err != nil {
			log.Printf("‚ùå JWT Auth: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: %v", err)
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid or expired token"})
			c.Abort()
			return
		}

		log.Printf("‚úÖ JWT Auth: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %s", claims.UserID)

		// Set user ID in context
		c.Set(UserIDKey, claims.UserID)
		c.Next()
	}
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
