package handler

import (
	"errors"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/lamoda-seller-app/internal/middleware"
	"github.com/lamoda-seller-app/internal/model"
	"github.com/lamoda-seller-app/internal/repository"
	"gorm.io/gorm"
)

// OrderHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–∫–∞–∑–∞–º–∏.
type OrderHandler struct {
	repo *repository.OrderRepository
}

func NewOrderHandler(repo *repository.OrderRepository) *OrderHandler {
	return &OrderHandler{repo: repo}
}

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ API ---

type ListOrdersAPIResponse struct {
	Orders     []model.Order                 `json:"orders"`
	Summary    *repository.ListOrdersSummary `json:"summary"`
	Pagination PaginationResponse            `json:"pagination"`
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

// ListOrders GET /api/orders
func (h *OrderHandler) ListOrders(c *gin.Context) {
	log.Printf("üì¶ Orders ListOrders: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ middleware'–æ–º)
	userID := c.MustGet(middleware.UserIDKey).(uuid.UUID)
	log.Printf("üë§ Orders ListOrders: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %s", userID)

	// --- –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
	log.Printf("üìã Orders ListOrders: –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞")
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	offset, _ := strconv.Atoi(c.DefaultQuery("offset", "0"))
	minAmount, _ := strconv.ParseFloat(c.DefaultQuery("min_amount", "0"), 64)
	maxAmount, _ := strconv.ParseFloat(c.DefaultQuery("max_amount", "0"), 64)

	var dateFrom, dateTo *time.Time
	if df := c.Query("date_from"); df != "" {
		if t, err := time.Parse(time.RFC3339, df); err == nil {
			dateFrom = &t
		}
	}
	if dt := c.Query("date_to"); dt != "" {
		if t, err := time.Parse(time.RFC3339, dt); err == nil {
			dateTo = &t
		}
	}

	customerID, _ := uuid.Parse(c.Query("customer_id"))
	productID, _ := uuid.Parse(c.Query("product_id"))

	params := repository.ListOrdersParams{
		UserID:     userID,
		Status:     c.Query("status"),
		DateFrom:   dateFrom,
		DateTo:     dateTo,
		CustomerID: customerID,
		ProductID:  productID,
		MinAmount:  minAmount,
		MaxAmount:  maxAmount,
		SortBy:     c.Query("sort_by"),
		SortOrder:  c.DefaultQuery("sort_order", "asc"),
		Limit:      limit,
		Offset:     offset,
	}

	log.Printf("üîç Orders ListOrders: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ - —Å—Ç–∞—Ç—É—Å: %s, –ª–∏–º–∏—Ç: %d, —Å–º–µ—â–µ–Ω–∏–µ: %d",
		params.Status, params.Limit, params.Offset)

	// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ---
	log.Printf("üîç Orders ListOrders: –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
	orders, summary, total, err := h.repo.List(c.Request.Context(), params)
	if err != nil {
		log.Printf("‚ùå Orders ListOrders: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to retrieve orders: " + err.Error()})
		return
	}

	log.Printf("üìä Orders ListOrders: –Ω–∞–π–¥–µ–Ω–æ %d –∑–∞–∫–∞–∑–æ–≤ –∏–∑ %d –æ–±—â–∏—Ö", len(orders), total)
	if summary != nil {
		log.Printf("üìà Orders ListOrders: —Å–≤–æ–¥–∫–∞ - –æ–±—â–∞—è —Å—É–º–º–∞: %.2f, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: %.2f",
			summary.TotalAmount, summary.AvgOrderValue)
	}

	// --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
	response := ListOrdersAPIResponse{
		Orders:  orders,
		Summary: summary,
		Pagination: PaginationResponse{
			Total:   total,
			Limit:   limit,
			Offset:  offset,
			HasNext: total > int64(limit+offset),
			HasPrev: offset > 0,
		},
	}

	log.Printf("‚úÖ Orders ListOrders: —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç")
	c.JSON(http.StatusOK, response)
}

// GetOrderByID GET /api/orders/{order_id}
func (h *OrderHandler) GetOrderByID(c *gin.Context) {
	log.Printf("üì¶ Orders GetOrderByID: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

	userID := c.MustGet(middleware.UserIDKey).(uuid.UUID)
	log.Printf("üë§ Orders GetOrderByID: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %s", userID)

	orderID, err := uuid.Parse(c.Param("order_id"))
	if err != nil {
		log.Printf("‚ùå Orders GetOrderByID: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid order ID format"})
		return
	}

	log.Printf("üîç Orders GetOrderByID: –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ ID: %s", orderID)

	order, err := h.repo.GetByID(c.Request.Context(), orderID, userID)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Printf("‚ùå Orders GetOrderByID: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
			c.JSON(http.StatusNotFound, gin.H{"error": "order not found or you don't have permission to view it"})
			return
		}
		log.Printf("‚ùå Orders GetOrderByID: –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "database error: " + err.Error()})
		return
	}

	log.Printf("‚úÖ Orders GetOrderByID: –∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω - –Ω–æ–º–µ—Ä: %s, —Å—Ç–∞—Ç—É—Å: %s", order.OrderNumber, order.Status)
	c.JSON(http.StatusOK, order)
}

// UpdateOrderStatus PUT /api/orders/{order_id}/status
func (h *OrderHandler) UpdateOrderStatus(c *gin.Context) {
	log.Printf("üì¶ Orders UpdateOrderStatus: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

	userID := c.MustGet(middleware.UserIDKey).(uuid.UUID)
	log.Printf("üë§ Orders UpdateOrderStatus: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %s", userID)

	orderID, err := uuid.Parse(c.Param("order_id"))
	if err != nil {
		log.Printf("‚ùå Orders UpdateOrderStatus: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid order ID format"})
		return
	}

	log.Printf("üîç Orders UpdateOrderStatus: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ID: %s", orderID)

	var req model.UpdateOrderStatusRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("‚ùå Orders UpdateOrderStatus: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid input: " + err.Error()})
		return
	}

	log.Printf("üìù Orders UpdateOrderStatus: –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: %s, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s", req.Status, req.Comment)

	// TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ 'new' –º–æ–∂–Ω–æ –≤ 'confirmed', –Ω–æ –Ω–µ –≤ 'delivered')

	updatedOrder, err := h.repo.UpdateStatus(c.Request.Context(), orderID, userID, req.Status, req.Comment, req.EstimatedDeliveryDate)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Printf("‚ùå Orders UpdateOrderStatus: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
			c.JSON(http.StatusNotFound, gin.H{"error": "order not found or you don't have permission to update it"})
			return
		}
		log.Printf("‚ùå Orders UpdateOrderStatus: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to update order status: " + err.Error()})
		return
	}

	log.Printf("‚úÖ Orders UpdateOrderStatus: —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: %s", updatedOrder.Status)
	c.JSON(http.StatusOK, gin.H{
		"message": "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
		"order": gin.H{
			"id":           updatedOrder.ID,
			"status":       updatedOrder.Status,
			"updated_date": updatedOrder.UpdatedAt,
		},
	})
}
